###############################
### HOST TMUX CONFIGURATION ###
###############################

## This configuration is meant to be used on tmux instances that have an active X server and are NOT remote/SSH tmux connections
## For example, it enables copy-mode that is piped to xclip and mouse support, which are undesirable in remote instances.

#plugins 
run-shell ~/.config/plugins/tmux/tmux-open/open.tmux
# set default shell as bash
set -g default-shell /bin/bash

# Enable mouse interaction
set -g mouse on

# Seaching
set -g wrap-search on

# Need to define the following for expected behavior and styling
set -g default-terminal "screen-256color"
set -ga terminal-overrides ',*-256color:Tc:Ss=\E[%p1%d q:Se=\E[1 q'

# Scrollback buffer number of lines
set -g history-limit 100000

# no delay when pressing esc
set -s escape-time 0

# emacs-style status-line but vi for all other modes
set -g status-keys emacs
set -g mode-keys vi

# Time in miliseconds between multiple commands to be considered as part
# of the same chain and, thus, not require another invocation of the
# <prefix>.  See the keybindings section below for all actions defined
# with the `-r` flag.
set -g repeat-time 200

# Keybinds
# --------

# prefix key is Alt+A
set -g prefix M-a
bind-key M-a last-window

# unneeded keys unbind o unbind p # reload config file
unbind r
bind r source-file ~/.tmux.conf

# kill the current pane without asking for confirmation (-a to kill all panes except current pane)
bind-key -r x kill-pane
bind X kill-pane -a

# kill the current window without asking for confirmation (-a to kill all windows except current window)
bind -r C-x kill-window
bind M-x kill-window -a
#bind-key M-x command-prompt -p "kill all windows except:" "kill-window -a -t ':%%'"

# split panes with g,h,v,b
bind -r g split-window -h -p 50 -c '#{pane_current_path}' # horizontally split active pane to the right
bind -r v split-window -v -p 50 -c '#{pane_current_path}' # vertically split active pane to the bottom
bind -r h split-window -hb -p 50 -c '#{pane_current_path}' # horizontally split active pane to the left
bind -r b split-window -vb -p 50 -c '#{pane_current_path}' # vertically split active pane to the top
bind -r G split-window -fh -c '#{pane_current_path}' # horizontally split whole screen to the right
bind -r V split-window -fv -c '#{pane_current_path}' # vertically split for whole screen to the bottom
bind -r H split-window -fhb -c '#{pane_current_path}' # horizontally split whole screen to the left
bind -r B split-window -fvb -c '#{pane_current_path}' # vertically split whole screen to the top

# Navigate panes without prefix key using Ctrl + Vim motions
bind -nr C-h select-pane -L
bind -nr C-j select-pane -D
bind -nr C-k select-pane -U
bind -nr C-l select-pane -R

#Cycle through window with Alt + Shift + C
bind -nr M-C select-window -t +

# Resize panes with <prefix>Ctrl-{h,j,k,l}.  Omit/adjust the number for
# finer adjustments.
bind -r C-h resize-pane -L 5
bind -r C-j resize-pane -D 5
bind -r C-k resize-pane -U 5
bind -r C-l resize-pane -R 5

# This is a default keybinding, but with repeat enabled
bind -r '{' swap-pane -U
bind -r '}' swap-pane -D

# Toggle input sync across panes (displays status when invoked).  The
# use of <prefix>a is a mnemonic for "all".
bind a set-window-option synchronize-panes\; display-message "synchronize-panes is now #{?pane_synchronized,on,off}"

# Navigate windows with Alt-Shift-{h,l}. 
# Move windows with Alt-Ctrl-{h,l}.
bind -n M-H previous-window
bind -n M-L next-window
bind -nr M-C-h swap-window -d -t -1
bind -nr M-C-l swap-window -d -t +1

# bring last visited pane to current window
bind @ join-pane -s !

# Swap active pane with the last one
bind Tab swap-pane -t ! 

# Swap active pane with the marked pane
bind C-Tab swap-pane

# bring a pane from a different window to current one (vertically)
bind-key j command-prompt -p "join pane from:"  "join-pane -d -s ':%%'"
# same as above, but horizontally
bind-key J command-prompt -p "join pane from:"  "join-pane -dh -s ':%%'"
# send a pane to a different window (vertically)
bind-key s command-prompt -p "send pane to:"  "join-pane -d -t ':%%'"
#same as above, but horizontally
bind-key S command-prompt -p "send pane to:"  "join-pane -dh -t ':%%'"
# s was the default for session mode, t will be used instead
bind-key t choose-tree -swZ
# pressing c in tree-mode creates a new session
bind -T root c if -F '#{==:#{pane_mode},tree-mode}' \
{command-prompt -p 'session name:' 'new-session -ds "%1"'} \
{send c}

# toggle status bar visibility
bind-key Space set -g status

# modes
#------

# copy mode
# Vim copy-paste behaviour using the clipboard (REQUIRES xclip)
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe "xclip -selection clipboard -i"
bind -T copy-mode-vi r send-keys -X rectangle-toggle
# For vi copy mode bindings
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -selection clipboard -i"
# For emacs copy mode bindings
bind -T copy-mode MouseDragEnd1Pane send-keys -X copy-pipe "xclip -selection clipboard -i"

# Another way to scroll up
bind C-u copy-mode -u

# User interface
# --------------

# Title and window settings
# NOTE auto rename is disabled for the given window upon manual rename.
set -g set-titles on # string shown on titlebars or programs such as `xwininfo`
set -g set-titles-string "#T" # title format
set -g automatic-rename on # name windows with <prefix>, (sessions with <prefix>)
set -g aggressive-resize on # manpage says "on" is bad for shellsâ€¦
set -g alternate-screen on
set-option -g automatic-rename-format '#{pane_current_command}'

# Start indices from 1 for both windows and panes.  Makes it easier for
# direct navigation.  Also renumber windows.
set -g base-index 1
set -g pane-base-index 1
set -g renumber-windows on

# Feedback (numbers represent miliseconds)
set -g display-panes-time 2400 # indicators for `display-panes` command
set -g display-time 1200 # use 0 to keep status line messages until key press

# Alerts
set -g monitor-bell on # check for terminal bell
set -g monitor-activity off # check for activity
set -g monitor-silence 0 # do not check for inactivity
set -g bell-action other # monitor for other windows
set -g activity-action other # monitor activity in other windows NOTE DO NOT TRACK CURRENT
set -g silence-action none # this should have no effect when: monitor-silence off
set -g visual-activity on # show message, make no sound
set -g visual-bell on # show message, make no sound

# Default window colours are inherited from the underlying terminal.
# This also allows for a transparent background.
set -g window-style "bg=default,fg=default"
set -g window-active-style "bg=default,fg=default"

# Pane styles.  Setting the bg to "default" allows for transparency, if
# the underlying terminal emulator is configured accordingly.
set -g pane-border-style "bg=default,fg=colour5"
set -g pane-active-border-style "bg=default,fg=white"

# Copy mode styles.  This governs such things as the visual selection
# block and the search results in the scroll buffer.  I choose to avoid
# setting to plain "reverse" because it is visually identical to Vim's
# selection, which can be confusing sometimes.
set -g mode-style "bg=colour8,fg=default,bold,underscore"

# Status line styles.  Used when displaying status messages and when
# using the command prompt.
set -g message-style "bg=default,fg=default,bold"

# Clock mode options (I seldom use this, but okay).
set -g clock-mode-style 24 # time format
set -g clock-mode-colour "colour2"

## Interval to update status bar in seconds.  Only affects some elements.
## Test on a case-by-case basis.  My setup is not affected.
set -g status-interval 1

# Status bar
# ---------

# Status bar general options about placement and overall style.
set -g status on
set -g status-style "fg=default,bg=default"
set -g status-position top
set -g status-justify left # this concerns the window list

# NOTE the status bar has three components: left, right, centre.  The
# latter is hard-coded to the window list component.  So instead of
# status-centre, we have to modify the `window-status` (see below).
set -g status-left-length "100"
set -g status-right-length "100"

# Window status.  Always placed in the centre if `status-justify
# "centre"`.  Otherwise it floats next to either of the two remaining
# components of the status bar.
#
# NOTE trigger alert to test bell: echo -e '\a'
set -g window-status-separator ""
set -g window-status-format " #I: #W #{?window_flags,#F , }"
set -g window-status-current-format "#[bold][#I: #W #F]"
set -g window-status-activity-style ""
set -g window-status-bell-style "fg=default,bg=colour2"
set -g window-status-style "fg=white,bg=colour5"
set -g window-status-current-style "fg=white,bg=colour3"
set -g window-status-last-style ""

## Status left and right
set -g status-left "#[bold]#{?pane_synchronized,#[fg=colour5] sync on ,}#{?pane_in_mode,#[fg=colour4] #{pane_mode}#{?selection_present, selecting,}#{?rectangle_toggle, rectangle,} ,}"
set -g status-right "#[bg=default,fg=default]#{?client_prefix,#[fg=colour6]#[bg=default]#[reverse],} [#(echo $USER)@#h] | %h %d %Y | %H:%M | #S #{?client_prefix,,}"
